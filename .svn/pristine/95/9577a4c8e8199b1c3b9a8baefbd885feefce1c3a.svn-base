/**
 * A class that runs implements several simple transformations on 2D image arrays.
 * <p>
 * This file contains stub code for your image transformation methods that are called by the main
 * class. You will do your work for this MP in this file.
 * <p>
 * Note that you can make several assumptions about the images passed to your functions, both by the
 * web front end and by our testing harness:
 * <ul>
 * <li>You will not be passed empty images.</li>
 * <li>All images will have even width and height.</li>
 * </ul>
 *
 * @see <a href="https://cs125.cs.illinois.edu/MP/4/">MP4 Documentation</a>
 */
public class Transform {

    /**
     * Default amount to shift an image's position. Not used by the testing suite, so feel free to
     * change this value.
     */
    public static final int DEFAULT_POSITION_SHIFT = 16;

    /**
     * Pixel value to use as filler when you don't have any valid data. All white with complete
     * transparency. DO NOT CHANGE THIS VALUE: the testing suite relies on it.
     */
    public static final int FILL_VALUE = 0x00FFFFFF;

    /**
     * Shift the image right by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the original image
     * @param amount the amount to shift
     * @return the shifted image
     */
    public static int[][] shiftLeft(final int[][] originalImage, final int amount) {
        int[][] leftImage = new int[originalImage.length][originalImage[0].length];
        for (int j = 0; j < originalImage[0].length; j++) {
            for (int i = 0; i < originalImage.length; i++) {
                if (i > (originalImage.length - 1 - amount)) {
                    leftImage[i][j] = FILL_VALUE;
                } else {
                    leftImage[i][j] = originalImage[i + amount][j];
                }
            }
        }
        return leftImage;
    }

    /*
     * Shift right like above.
     */
    /**
     * Shift the image right by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the original image
     * @param amount the amount to shift
     * @return the shifted image
     */
    public static int[][] shiftRight(final int[][] originalImage, final int amount) {
        int[][] rightImage = new int[originalImage.length][originalImage[0].length];

        for (int j = 0; j < rightImage[0].length; j++) {
            for (int i = rightImage.length - 1; i >= 0; i--) {
                if (amount <= i) {
                    rightImage[i][j] = originalImage[i - amount][j];
                } else {
                    rightImage[i][j] = FILL_VALUE;
                }
            }
        }
        return rightImage;
    }


    /**
     * Shift the image right by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the original image
     * @param amount the amount to shift
     * @return the shifted image
     */

    public static int[][] shiftUp(final int[][] originalImage, final int amount) {
        int[][] upImage = new int[originalImage.length][originalImage[0].length];

        for (int x = 0; x < upImage.length; x++) {
            for (int y = 0; y < upImage[x].length; y++) {
                if (y < upImage[x].length - amount) {
                    upImage[x][y] = originalImage[x][y + amount];
                } else {
                    upImage[x][y] = FILL_VALUE;
                }
            }
        }
        return upImage;
    }

    /**
     * Shift the image right by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the original image
     * @param amount the amount to shift
     * @return the shifted image
     */
    public static int[][] shiftDown(final int[][] originalImage, final int amount) {
        int[][] downImage = new int[originalImage.length][originalImage[0].length];

        for (int i = 0; i < downImage.length; i++) {
            for (int j = downImage[i].length - 1; j >= 0; j--) {
                if (j < amount) {
                    downImage[i][j] = FILL_VALUE;
                } else {
                    downImage[i][j] = originalImage[i][j - amount];
                }
            }
        }
        return downImage;
    }
    /**
     * Rotate the image left by 90 degrees around its center.
     * <p>
     * Any pixels rotated in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to rotate
     * @return the rotated image
     */
    public static int[][] rotateLeft(final int[][] originalImage) {
       return null;
    }

    /*
     * Rotate the image right like above.
     */
    /**
     * Rotate the image left by 90 degrees around its center.
     * <p>
     * Any pixels rotated in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to rotate
     * @return the rotated image
     */
    public static int[][] rotateRight(final int[][] originalImage) {
       return null;
    }
    /**
     *Flip the image on the vertical axis across its center
     * Any pixels rotated in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to flip
     * @return the flipped image
     */
    public static int[][] flipVertical(final int[][] originalImage) {
        int[][] newImage = new int[originalImage.length][originalImage[0].length];
        for (int x = 0; x < originalImage.length; x++) {
            for (int y = 0; y < originalImage[0].length; y++) {
                newImage[x][y] = originalImage[x][(originalImage[0].length - 1) - y];
            }
        }
        return newImage;

    }

    /*
     * Flip the image on the horizontal axis across its center.
     */
    /**
     *Flip the image on the vertical axis across its center
     * Any pixels rotated in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to flip
     * @return the flipped image
     */
    public static int[][] flipHorizontal(final int[][] originalImage) {

        int[][] newImage = new int[originalImage.length][originalImage[0].length];
        for (int y = 0; y < originalImage[0].length; y++) {
        for (int x = 0; x < originalImage.length; x++) {
                newImage[x][y] = originalImage[(originalImage.length - 1) - x][y];
            }
        }
        return newImage;
    }

    /**
     * Default amount to shift colors by. Not used by the testing suite, so feel free to change this
     * value.
     */
    public static final int DEFAULT_COLOR_SHIFT = 32;
    /**
     *MAX max amount of color value.
     */
    private static final int MAX = 255;
    /**
     *MIN min amount of color value.
     */
    private static final int MIN = 0;

    /**
     * Add red to the image.
     * <p>
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to add color to
     * @param amount the amount of color to add
     * @return the recolored image
     */


    public static int[][] moreRed(final int[][] originalImage, final int amount) {
               return null;
        }
    /*
     * Remove red from the image.
     */
    /**
     * Remove red to the image.
     * <p>
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to remove color
     * @param amount the amount of color to remove
     * @return the recolored image
     */
        public static int[][] lessRed(final int[][] originalImage, final int amount) {

            return null;
            }

    /*
     * Add green to the image.
     */
    /**
     * Add green to the image.
     * <p>
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to add color to
     * @param amount the amount of color to add
     * @return the recolored image
     */
    public static int[][] moreGreen(final int[][] originalImage, final int amount) {

        return null;
        }

    /*
     * Remove green from the image.
     */
    /**
     * Remove green to the image.
     * <p>
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to remove color from
     * @param amount the amount of color to remove
     * @return the recolored image
     */
    public static int[][] lessGreen(final int[][] originalImage, final int amount) {

        return null;
        }


    /*
     * Add blue to the image.
     *//**
     * Add blue to the image.
     * <p>
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to add color to
     * @param amount the amount of color to add
     * @return the recolored image
     */
    public static int[][] moreBlue(final int[][] originalImage, final int amount) {
        return null;
    }


    /*
     * Remove blue from the image.
     */
    /**
     * Remove blue to the image.
     * <p>
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to remove color from
     * @param amount the amount of color to remove
     * @return the recolored image
     */
    public static int[][] lessBlue(final int[][] originalImage, final int amount) {
        return null;
        }

    /*
     * Increase the image alpha channel.
     */
    /**
     *Increase the image alpha channel.
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to remove transparent from
     * @param amount the amount of transparent to remove
     * @return less transparent image
     */
    public static int[][] moreAlpha(final int[][] originalImage, final int amount) {

        return null;
        }

    /*
     * Decrease the image alpha channel.
     */
    /**
     *Decrease the image alpha channel.
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to add transparency to
     * @param amount the amount of transparency to add
     * @return more transparent image
     */
    public static int[][] lessAlpha(final int[][] originalImage, final int amount) {

        return null;
    }

    /*
     * Expand in the vertical axis around the image center.
     */
    /**
     * Expand in the vertical axis around the image center.
     * <p>
     * An amount of 2 will result in an image that is double its original height. An amount of 3
     * will result in an image that's a triple of its original height.
     * This function <i>does not modify the originalimage</i>.
     *
     * @param originalImage the image to shrink
     * @param amount the factor by which the image's height is increased
     * @return the expanded image
     */
    public static int[][] expandVertical(final int[][] originalImage, final int amount) {

        return null;
    }

    /*
     * Shrink in the horizontal axis around the image center.
     */
    /**
     * Shrink in the horizontal axis around the image center.
     * <p>
     * An amount of 2 will result in an image that is half its original width. An amount of 3 will
     * result in an image that's a third of its original width. Any pixels shrunk in from off
     * screen should be filled with FILL_VALUE. This function <i>does not modify the original
     * image</i>.
     *
     * @param originalImage the image to shrink
     * @param amount the factor by which the image's width is reduced
     * @return the shrunken image
     */
    public static int[][] shrinkHorizontal(final int[][] originalImage, final int amount) {
        return null;
    }

    /*
     * Expand in the horizontal axis around the image center.
     */
    /**
     * Expand in the horizontal axis around the image center.
     * <p>
     * An amount of 2 will result in an image that is double its original width. An amount of 3 will
     * result in an image that's a triple of its original width. This function
     * <i>does not modify the original image</i>.
     *
     * @param originalImage the image to expand
     * @param amount the factor by which the image's width is increased
     * @return the expanded image
     */
    public static int[][] expandHorizontal(final int[][] originalImage, final int amount) {

        return null;
    }

    /**
     * Remove a green screen mask from an image.
     * <p>
     * This function should remove primarily green pixels from an image and replace them with
     * transparent pixels (FILL_VALUE), allowing you to achieve a green screen effect. Obviously
     * this function will destroy pixels, but it <i>does not modify the original image</i>.
     * <p>
     * While this function is tested by the test suite, only extreme edge cases are used. Getting it
     * work work will with real green screen images is left as a challenge for you.
     *
     * @param originalImage the image to remove a green screen from
     * @return the image with the green screen removed
     */
    public static int[][] greenScreen(final int[][] originalImage) {
       return null;
    }

    /**
     * A wild and mysterious image transform.
     * <p>
     * You are free to implement this in any way you want. It is not tested rigorously by the test
     * suite, but it should do something (change the original image) and <i>not modify the original
     * image</i>.
     * <p>
     * Call this function mystery. It should take only the original image as a single argument and
     * return a modified image.
     *
     * @param originalImage the image to remove a green screen from
     * @return the image transformed in wooly and frightening ways
     */
    public static int[][] mystery(final int[][] originalImage) {
        return null;
    }

}
